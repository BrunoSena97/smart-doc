# deployments/docker/Dockerfile.smartdoc
FROM python:3.12-slim

ENV POETRY_VERSION=1.8.3 \
    PIP_NO_CACHE_DIR=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/root/.local/bin:${PATH}"

WORKDIR /app

# System deps
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl ca-certificates tini supervisor cron sqlite3 tzdata \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install "poetry==${POETRY_VERSION}"

# Copy Poetry manifests (layer caching)
COPY packages/core/pyproject.toml packages/core/poetry.lock* /app/packages/core/
COPY apps/api/pyproject.toml apps/api/poetry.lock* /app/apps/api/

# Install dependencies in layers for better caching
WORKDIR /app/packages/core
RUN poetry config virtualenvs.create false && \
    poetry install --no-interaction --no-ansi --only=main

WORKDIR /app/apps/api
RUN poetry config virtualenvs.create false && \
    poetry install --no-interaction --no-ansi --only=main

# Copy source code
WORKDIR /app
COPY packages/core/src /app/packages/core/src
COPY apps/api/src      /app/apps/api/src
COPY apps/web/public   /app/web
COPY configs           /app/configs

# Install packages in development mode (since we copied source)
WORKDIR /app/packages/core
RUN poetry install --no-interaction --no-ansi --only=main

WORKDIR /app/apps/api
RUN poetry install --no-interaction --no-ansi --only=main

# Install Ollama inside container
RUN curl -fsSL https://ollama.com/install.sh | sh

# Runtime dirs
RUN mkdir -p /var/log/smartdoc /data /etc/smartdoc && \
    ln -sf /dev/stdout /var/log/smartdoc/app.log && \
    ln -sf /dev/stderr /var/log/smartdoc/app.err.log

# Create backup directory
RUN mkdir -p /var/log/smartdoc/backups

# Supervisor & entrypoint scripts
COPY deployments/docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY deployments/docker/entrypoint.sh    /entrypoint.sh
COPY deployments/docker/warmup.sh        /app/deployments/docker/warmup.sh
COPY deployments/docker/backup-cron      /etc/cron.d/backup-cron

# Make scripts executable
RUN chmod +x /entrypoint.sh && \
    chmod +x /app/deployments/docker/warmup.sh

# Cron: daily SQLite backup to /var/log/smartdoc/backups
RUN chmod 0644 /etc/cron.d/backup-cron && \
    crontab /etc/cron.d/backup-cron

# Set working directory for the app
WORKDIR /app

EXPOSE 8000
HEALTHCHECK --interval=20s --timeout=3s --retries=10 CMD curl -f http://127.0.0.1:8000/healthz || exit 1

ENTRYPOINT ["/usr/bin/tini","--"]
CMD ["/entrypoint.sh"]
